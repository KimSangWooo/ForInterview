1 공통 프로그래밍--------------------------------------------
 (1)프레임워크와 라이브러리의 차이 : 제어 흐름에 대한 주도권이 어디에 있는지 있다. 프레임워크는 전체적인 흐름을 쥐고 있고, 그 안에서 라이브러리에 대한 흐름이 존재한다. 그리고 개발자가 프레임워크에게 제어권을 넘김으로써 신경써야 할 것을 줄일 수 있는데, 이를 제어의 역전 이라고 한다.

 (2)Restful API : http통신을 rest 설계 규칙을 잘 지켜서 개발한 API를 말한다. rest 설계 규칙은 url정보의 자원만 표현해야 하고, 자원의 상태와 행위는 http 메소드에 명시하는걸 의미한다.

 (3)Call by Value 와 Call by Reference의 차이 : 전자는 인자로 받은 값을 복사하여 처리하는 방식이고, 후자는 인자값의 주소를 참조하여 직접 저장하는 방식이다. 자바는 기본적으로 Call by Value 방식이다.

 (4)절차지향 프로그래밍과 객체지향 프로그래밍의 차이 : 절차지향 프로그래밍은 위에서 아래로 순차적인 처리를 중요시하는 프로그래밍 기법이다. 대표적으로 C가 있으며 컴퓨터 처리구조와 유사해 실행속도가 빠르다. 하지만 코드의 순서가 바뀐다면 결과에 지장을 줄 수가 있다. 객제지향 프로그래밍은 실제 사물들을 모델링하여 개발을 진행하는 프로그래밍 기법으로서, 대표적으로 Java가 있고 캡슐화,상속,다형성 같은 기법을 사용할 수가 있다. 코드의 범위가 순서와 관계없이 넓다 보니 절차지향 프로그래밍보다 속도가 느리다.

 (5)대칭키, 비대칭키 암호화 방식에 대해 설명 : 대칭키는 암호화와 복호화에 같은 암호 키를 쓰는 알고리즘이다. 이는 중간에 누군가 암호키를 가로채면 정보가 유출될 수 있다는 단점이 있는데, 이를 보완한 방식이 비대칭키 이다. 비대칭키는 암호화와 복호화할 때 서로 다른 키를 쓰는 알고리즘이다. 타인에게 절대 노출되어서는 안되는 개인키와 공개적으로 개방되어 있는 공개키를 쌍으로 이룬 형태이다. 

 (6)TDD(Test-Driven-Development)의 개념에 대해 설명 : 작은 단위의 테스트 케이스를 작성하고 그에 맞는 코드를 작성하여 테스트를 통과한 후에 상황에 맞게 리팩토링하는 테스트 주도 개발 방식을 말한다. 이런 단계가 진행되면서 코드의 버그가 줄어들고, 코드는 간결해진다는 이점이 있다. 

2 백엔드------------------------------------------------
 (1)WAS(Web Application Server)와 WS(Web Server)의 차이 설명 : 전자는 비즈니스 로직을 넣을 수 있고 Tomcat, php, asp, .net등을 사용한다.
후자는 비즈니스 로직을 넣을 수 없으며,  nginx, apache 등을 사용한다.

 (2)스프링 프레임워크에 대해 설명 : 스프링 프레임워크는 자바 개발을 편리하게 해주는 오픈소스 프레임워크 이다. 경량 컨테이너로서 자바 객체를 직접 관리(각각의 객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링에서 사용자의 코드를 호출), 제어의 역전 이라는 기술을 통해 어플리케이션의 느슨한 결합을 도모(컨트롤 제어권이 사용자가 아닌 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출), 의존성 주입을 지원(각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결), 관점 지향 프로그래밍을 지원(트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.

 (3)스프링 부트와 스프링 프레임워크의 차이점 : 가장 큰 차이점은 Auto Configuration의 차이이다. 스프링은 프로젝트 초기에 다양한 환경설정을 해야 하지만, 스프링 부트는 설정의 많은 부분을 자동화하여 사용자가 편하게 스프링을 활용할 수 있도록 돕는다. 스프링 부트 의존성만 추가해주면 설정은 끝나고, 내장된 톰캣을 제공해 서버를 바로 실행할 수 있다.

 (4)스프링 MVC에 대해 설명 : MVC는 각 레이어간 기능을 구분하는데 중점을 둔 디자인 패턴이다.
Model은 데이터 관리 및 비즈니스 로직을 처리하는 부분이며(Dao, Dto, Service 등)
View는 비즈니스 로직의 처리 결과를 통해 유저 인터페이스가 표현되는 구간이다.(Html, jsp, tymeleaf, mustache등 화면을 구성하기도 하고, Reas Api로 서버가 구현된다면 json응답으로 구성되기도 한다.
Controller는 사용자의 요청을 처리하고 Model과 View를 중개하는 역할을 한다. Model과 View는 서로 연결되어 있지 않기 때문에 Controller가 사이에서 통신 매체의 역할을 한다.

 (5)MVC는 어떠한 흐름으로 요청을 처리하는지 설명 : 
DispatcherServlet : 클라이언트에게 요청을 받아 응답까지의 MVC 처리과정을 통제한다.
HandlerMapping : 클라이언트의 요청 URL을 어떤 Controller가 처리할지 결정한다.
HandlerAdapter : HandlerMapping에서 결정된 핸들러 정보로 해당 메소드를 직접 호출해주는 역할을 한다.
ViewResolver : Controller의 처리 결과(데이터)를 생성할 view를 결정한다.

url 요청 전송 - DispatcherServlet은 HandlerMapping을 통해 해당 요청이 어느 컨트롤러에게 온 요청인지 식별 - DispatcherServlet은 HandlerAdapter에게 요청 전달을 맡김 - HandlerAdapter는 해당 컨트롤러에 요청 전달 - 컨트롤러는 비즈니스로직을 처리한 후에 반환할 뷰의 이름을 반환 - DispatcherServlet은 View Resolver를 통해 반환할 뷰를 찾음 - DispatcherServlet은 컨트롤러에서 뷰에 전달할 데이터를 추가 - 데이터가 추가된 뷰를 반환

 (6)제어의 역전에 대해 설명 : 모든 객체에 대한(생성, 라이프사이클) 제어권을 개발자가 아닌 IoC 컨테이너에게 넘긴 것을 말한다. 스프링에서 Ioc컨테이너에 객체들을 생성하면 객체끼리 의존성을 주입하는 역할을 하고 컨테이너에 등록한 객체들을 빈 이라고 한다.

 (7)빈 등록하는 방법 : 첫째, @Component어노테이션을 활용(@Controlelr, @Service, @Repository는 모두 @Component를 포함), 둘째, 설정 클래스를 따로 만들어 @Configration 어노테이션을 붙이고, 해당 클래스 안에서 빈으로 등록할 메소드를 만들어 @Bean 어노테이션을 붙여주면 자동으로 해당 타입의 빈 객체가 생성된다.

 (8)의존성 주입에 대해 설명 : 필요한 객체를 직접 생성하는것이 아닌 외부로부터 객체를 받아서 사용하는 것이다. 이를 통해 객체간의 결합도를 줄이고 코드의 재사용성을 높일 수 있다. 의존성 주입은 생성사, 필드, 세터 주입의 3가지 방법이 있다. Spring에서 가장 권장하는 방법은 생성자 주입 방법이다. 그 이유로는 순환 참조 방지, 불변성, 테스트에 용이 등이 있다.

 (9)스프링 빈의 라이프사이클은 어떻게 관리되는지 설명 : IOC 컨테이너 생성 - 스프링 빈 생성 - 의존관계 주입 - 초기화 콜백 메소드 호출 - 사용 - 소멸 전 콜백 메소드 호출 - 스프링 종료
크게 세가지 방법으로 생명주기 콜백을 관리 (인터페이스, 초기화메소드와 종료메소드 지정, @PostConstruc와 @PreDestry어노테이션 지원

 (10)관점지향 프로그래밍(AOP)는 무엇이고, 언제 사용할 수 있을지 : 핵심 비즈니스 로직에 있는 공통 관심사항을 분리하여 각각을 모듈화 하는 것을 의미하며 공통 모듈인 인증, 로깅, 트랜잭션 처리에 용이함. 핵심 비즈니스 로직에 부가기능을 하는 모듈이 중복되어 분포되어 있을 경우 사용할 수 있음. 가장 큰 특징과 장점은 중복 코드 제거, 재활용성의 극대화, 변화수용의 용이성이 좋다는 점이다.

 (11)Lombok 라이브러리가 만드는 메소드들이 생성되는 시점은 언제인가 : Lombok 메소드를 컴파일 하는 과정에 개입해서 추가적인 코드를 만들어낸다. 이것을 어노테이션 프로세싱이라고 하는데, 자바 컴파일러가 컴파일 단계에서 어노테이션을 분석하고 처리하는 기법을 말한다. 

 (12)Servlet에 대해 설명 : 클라이언트 요청을 처리하고, 그 결과를 반환하는 Servlet 클래스의 규현 규칙을 지킨 자바 웹 프로그래밍 기술이다. Spring MVC에서 Controller로 이용되며, 사용자의 요청을 받아 처리한 후에 결과를 반환한다.
